{"version":3,"sources":["components/filter-sorter/config.ts","store/routes.slice.ts","util/util.ts","api/routes.api.ts","components/popups/count-shorter-popup.tsx","components/additional-actions/count-shorter-button.tsx","components/popups/pretty-route.tsx","components/popups/delete-with-distance-popup.tsx","components/additional-actions/delete-with-distance-button.tsx","components/popups/get-by-id-popup.tsx","components/additional-actions/get-by-id-button.tsx","components/popups/get-min-popup.tsx","components/additional-actions/get-min-button.tsx","components/additional-actions/additional-actions.tsx","components/popups/edit-route-popup.tsx","components/table/empty-row.tsx","store/routes.store.ts","components/table/table.footer.tsx","components/table/table.header.tsx","thunks/routes.thunks.ts","store/hooks.ts","components/table/table.row.tsx","components/table/table.tsx","components/filter-sorter/sorting-input.tsx","components/filter-sorter/filter-field.tsx","components/filter-sorter/sorter.tsx","components/filter-sorter/filter-sorter-context.tsx","components/layout.tsx","api/counter.api.ts","store/counter.slice.ts","store/store.ts","index.tsx"],"names":["RouteFields","Status","initialFilterSorter","Object","values","reduce","sorting","field","value","getFieldLabel","routeField","capitalize","split","getFieldEndLabel","label","fields","fieldName","map","flat","str","length","toUpperCase","substring","toLowerCase","hasContentType","response","type","contentType","headers","get","includes","callApi","url","init","a","fetch","ok","json","text","ROUTES_API_BASE","RoutesApi","getRoutes","query","queryString","stringify","sort","limit","offset","filter","getRouteById","id","addRoute","route","method","body","JSON","Accept","updateRoute","deleteRouteById","deleteWithDistance","distance","countShorterThan","getWithMinDistance","CountShorterPopup","isOpen","onClose","useState","setDistance","count","setCount","error","setError","Dialog","open","DialogTitle","DialogContent","Stack","spacing","TextField","onChange","e","parseInt","target","fullWidth","size","required","Alert","severity","DialogActions","Button","onClick","undefined","then","res","catch","onSubmit","disabled","CountShorterButton","setOpen","variant","color","PrettyRoute","name","coordinates","x","y","from","to","z","Date","creationDate","toLocaleDateString","DeleteWithDistancePopup","setRoute","DeleteWithDistanceButton","GetByIdPopup","setId","GetByIdButton","GetMinPopup","GetMinButton","finally","AdditionalActions","direction","EditRoutePopup","routeEdit","setRouteEdit","alignItems","EmptyRow","rowSpan","colSpan","TableRow","style","height","TableCell","align","emptyRoute","RoutesTableFooter","page","rowsPerPage","hasMore","onPageChange","onRowsPerPageChange","onAdd","TableFooter","startIcon","TablePagination","rowsPerPageOptions","nextIconButtonProps","HeaderTableCell","styled","tableCellClasses","head","backgroundColor","fontWeight","RoutesTableHeader","TableHead","width","RoutesThunks","createAsyncThunk","ROUTES_THUNKS_BASE","deleteRoute","useDispatch","useBaseDispatch","useSelector","useBaseSelector","RoutesTableRow","index","onEdit","dispatch","hover","IconButton","fontSize","initialState","entities","status","IDLE","routesReducer","createSlice","reducers","extraReducers","builder","addCase","pending","state","FETCHING","fulfilled","action","LOADED","meta","arg","payload","concat","rejected","ERROR","deletedIndex","findIndex","splice","reducer","RoutesTable","enqueueSnackbar","useSnackbar","routes","editIndex","setEditIndex","isPopupOpen","setPopupOpen","rowToEdit","onEditClick","shownRows","slice","nextPageAvailable","TableContainer","component","Paper","Table","sx","minWidth","aria-label","TableBody","err","String","SortingInput","FormControl","InputLabel","Select","labelId","MenuItem","DateField","setFieldValue","DatePicker","toISOString","renderInput","params","FilterField","filterSorterField","setFieldSorting","title","Box","className","Sorter","filterSorter","getFilteredRoutes","clearFilter","ID","NAME","COORDINATES_X","COORDINATES_Y","FROM_X","FROM_Y","FROM_NAME","TO_X","TO_Y","TO_Z","DISTANCE","CREATION_DATE","FilterSorterContext","setFilterSorter","setPage","setRowsPerPage","fetchRoutesWithFilter","keys","forEach","key","routeKey","push","getTime","separateFilterSorter","useEffect","event","newPage","pageStart","pageEnd","Math","max","min","newRowsPerPage","Header","Layout","Container","maxWidth","LocalizationProvider","dateAdapter","DateAdapter","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","counterSlice","increment","decrement","incrementByAmount","actions","store","configureStore","counter","counterReducer","ReactDOM","render","StrictMode","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.d6c4141b.chunk.js","sourcesContent":["import { capitalize } from '../../util/util';\n\nexport type SortType = 'asc' | 'desc' | '';\n\nexport type FilterSorterField = { sorting: SortType; value: string };\nexport type FilterSorter = Record<RouteFields, FilterSorterField>;\n\nexport enum RouteFields {\n  ID = 'id',\n  NAME = 'name',\n  COORDINATES_X = 'coordinates.x',\n  COORDINATES_Y = 'coordinates.y',\n  CREATION_DATE = 'creationDate',\n  FROM_X = 'from.x',\n  FROM_Y = 'from.y',\n  FROM_NAME = 'from.name',\n  TO_X = 'to.x',\n  TO_Y = 'to.y',\n  TO_Z = 'to.z',\n  DISTANCE = 'distance',\n}\n\nexport const initialFilterSorter: FilterSorter = Object.values(\n  RouteFields,\n).reduce((sorting, field) => {\n  sorting[field] = {\n    sorting: '',\n    value: '',\n  };\n  return sorting;\n}, {} as FilterSorter);\n\nexport const getFieldLabel = (routeField: RouteFields) =>\n  capitalize(routeField.split('.')[0]);\n\nexport const getFieldEndLabel = (routeField: RouteFields) =>\n  capitalize(routeField.split('.')[1]);\n\nexport type Field = {\n  label?: string;\n  fieldName: string;\n  value: any;\n  sorting: SortType;\n};\ntype FieldContainer = { label: string; fields: Field[] };\ntype FilterSorterConfig = FieldContainer[];\n\nexport const filterSorterConfig: FilterSorterConfig = [\n  { label: 'Id', fields: [{ fieldName: 'id', value: null, sorting: '' }] },\n  {\n    label: 'Name',\n    fields: [{ fieldName: 'name', value: null, sorting: '' }],\n  },\n  {\n    label: 'Coordinates',\n    fields: [\n      { label: 'X', fieldName: 'coordinates.x', value: null, sorting: '' },\n      { label: 'Y', fieldName: 'coordinates.y', value: null, sorting: '' },\n    ],\n  },\n  {\n    label: 'From',\n    fields: [\n      { label: 'X', fieldName: 'from.x', value: null, sorting: '' },\n      { label: 'Y', fieldName: 'from.y', value: null, sorting: '' },\n      { label: 'Name', fieldName: 'from.name', value: null, sorting: '' },\n    ],\n  },\n  {\n    label: 'To',\n    fields: [\n      { label: 'X', fieldName: 'to.x', value: null, sorting: '' },\n      { label: 'Y', fieldName: 'to.y', value: null, sorting: '' },\n      { label: 'Z', fieldName: 'to.z', value: null, sorting: '' },\n    ],\n  },\n  {\n    label: 'Distance',\n    fields: [{ fieldName: 'distance', value: null, sorting: '' }],\n  },\n];\n\nexport const filterSorterInitialState = filterSorterConfig\n  .map(field => field.fields)\n  .flat(2);\n","import { Route } from './routes.store';\nimport { RoutesThunks } from '../thunks/routes.thunks';\nimport { createSlice } from '@reduxjs/toolkit';\n\ntype RoutesSlice = {\n  entities: Route[];\n  status: Status;\n  hasMore: boolean;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  LOADED,\n  ERROR,\n}\n\nconst initialState: RoutesSlice = {\n  entities: [],\n  status: Status.IDLE,\n  hasMore: true,\n};\n\nexport const routesSlice = createSlice({\n  name: 'routes',\n  initialState,\n  reducers: {},\n  extraReducers: builder =>\n    builder\n      .addCase(RoutesThunks.getRoutes.pending, state => {\n        state.status = Status.FETCHING;\n      })\n      .addCase(RoutesThunks.getRoutes.fulfilled, (state, action) => {\n        state.status = Status.LOADED;\n        const { arg: query } = action.meta;\n        if (query.offset == 0) {\n          state.entities = action.payload;\n          state.hasMore = true;\n        } else if (state.entities.length == query.offset) {\n          state.entities = state.entities.concat(action.payload);\n        }\n        if (action.payload.length < (query.limit || 5)) state.hasMore = false;\n      })\n      .addCase(RoutesThunks.getRoutes.rejected, state => {\n        state.status = Status.ERROR;\n      })\n      .addCase(RoutesThunks.updateRoute.pending, state => {\n        state.status = Status.FETCHING;\n      })\n      .addCase(RoutesThunks.updateRoute.fulfilled, (state, action) => {\n        state.status = Status.LOADED;\n        state.entities = state.entities.concat(action.payload);\n      })\n      .addCase(RoutesThunks.updateRoute.rejected, state => {\n        state.status = Status.ERROR;\n      })\n      .addCase(RoutesThunks.deleteRoute.fulfilled, (state, action) => {\n        const deletedIndex = state.entities.findIndex(\n          route => route.id == action.payload.id,\n        );\n        state.entities.splice(deletedIndex, 1);\n      }),\n});\n\nexport const routesReducer = routesSlice.reducer;\n","import { FilterSorter, RouteFields } from '../components/filter-sorter/config';\nimport { QueryFilter, QuerySort } from '../api/routes.api';\nimport { Route, RoutePartial } from '../store/routes.store';\n\nexport const capitalize = (str = '') =>\n  str.length ? str[0].toUpperCase() + str.substring(1).toLowerCase() : str;\n\nexport const partialToRoute = (partial: RoutePartial): Route => {\n  return partial as Route;\n};\n\nexport const separateFilterSorter = (\n  filterSorter: FilterSorter,\n): { sort: QuerySort; filter: QueryFilter } => {\n  const sort = [] as string[];\n  const filter = {} as QueryFilter;\n  Object.keys(filterSorter).forEach(key => {\n    const routeKey = key as RouteFields;\n    const sorting = filterSorter[routeKey].sorting;\n    if (sorting) {\n      if (sorting == 'desc') sort.push('-' + key);\n      else sort.push(key);\n    }\n    const value = filterSorter[routeKey].value;\n    if (value) {\n      filter[routeKey] =\n        routeKey == RouteFields.CREATION_DATE\n          ? new Date(value).getTime()\n          : value;\n    }\n  });\n\n  return { sort, filter };\n};\n\nconst hasContentType = (response: Response, type: 'json' | 'text'): boolean => {\n  const contentType = response.headers.get('content-type');\n  if (!contentType) return false;\n  switch (type) {\n    case 'json':\n      return contentType?.includes('application/json');\n    case 'text':\n      return (\n        contentType?.includes('text/html') ||\n        contentType?.includes('text/plain')\n      );\n    default:\n      return false;\n  }\n};\n\nexport const callApi = async (url: string, init?: RequestInit) => {\n  const response = await fetch(url, init);\n  if (response.ok) {\n    const isJson = hasContentType(response, 'json');\n    if (isJson) {\n      return await response.json();\n    } else {\n      return await response.text();\n    }\n  } else {\n    throw await response.text();\n  }\n};\n","import { Route, RoutePartial } from '../store/routes.store';\nimport { RouteFields } from '../components/filter-sorter/config';\nimport { callApi } from '../util/util';\nimport { stringify } from 'query-string';\n\nconst ROUTES_API_BASE = '/api/routes';\n\nexport type QuerySort = string[];\nexport type QueryFilter = Partial<Record<RouteFields, any>>;\n\ntype RoutesQuery = {\n  sort?: QuerySort;\n  limit?: number;\n  offset?: number;\n  filter?: QueryFilter;\n};\n\nconst getRoutes = async (query: RoutesQuery): Promise<Route[]> => {\n  const queryString = stringify({\n    sort: query.sort,\n    limit: query.limit || 10,\n    offset: query.offset || 0,\n    ...query.filter,\n  });\n  return await callApi(`${ROUTES_API_BASE}?${queryString}`);\n};\n\nconst getRouteById = async (id: number): Promise<Route> => {\n  return await callApi(`${ROUTES_API_BASE}/${id}`);\n};\n\nconst addRoute = async (route: RoutePartial): Promise<Route> => {\n  return await callApi(`${ROUTES_API_BASE}`, {\n    method: 'POST',\n    body: JSON.stringify(route),\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\nconst updateRoute = async (route: Route): Promise<Route> => {\n  return await callApi(`${ROUTES_API_BASE}/${route.id}`, {\n    method: 'PUT',\n    body: JSON.stringify(route),\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\nconst deleteRouteById = async (id: number): Promise<Route> => {\n  return await callApi(`${ROUTES_API_BASE}/${id}`, {\n    method: 'DELETE',\n  });\n};\n\nconst deleteWithDistance = async (distance: number): Promise<Route> => {\n  return await callApi(\n    `${ROUTES_API_BASE}/delete-with-distance?distance=${distance}`,\n    {\n      method: 'DELETE',\n    },\n  );\n};\n\nconst countShorterThan = async (distance: number): Promise<number> => {\n  return await callApi(\n    `${ROUTES_API_BASE}/count-shorter-than?distance=${distance}`,\n  );\n};\n\nconst getWithMinDistance = async (): Promise<Route> => {\n  return await callApi(`${ROUTES_API_BASE}/min-distance`);\n};\n\nexport const RoutesApi = {\n  getRoutes,\n  getRouteById,\n  addRoute,\n  updateRoute,\n  deleteRouteById,\n  deleteWithDistance,\n  countShorterThan,\n  getWithMinDistance,\n};\n","import { Alert, Dialog, DialogContent, Stack } from '@mui/material';\nimport { RoutesApi } from '../../api/routes.api';\nimport Button from '@mui/material/Button';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\ntype CountShorterPopupProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const CountShorterPopup: React.FC<CountShorterPopupProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const [distance, setDistance] = useState<number>();\n  const [count, setCount] = useState<number>();\n  const [error, setError] = useState();\n\n  const onSubmit = (distance: number) => {\n    RoutesApi.countShorterThan(distance)\n      .then(res => {\n        setCount(res);\n        setError(undefined);\n      })\n      .catch(error => setError(error));\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>Count Routes shorter than ...</DialogTitle>\n      <DialogContent>\n        <Stack spacing={1}>\n          <TextField\n            value={distance || ''}\n            onChange={e => setDistance(parseInt(e.target.value, 10))}\n            fullWidth\n            type=\"number\"\n            size=\"small\"\n            label=\"Distance\"\n            required\n          />\n          {count && <Alert severity=\"success\">Count: {count}</Alert>}\n          {error && <Alert severity=\"error\">{error}</Alert>}\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          onClick={() => distance != undefined && onSubmit(distance)}\n          disabled={distance == undefined}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { CountShorterPopup } from '../popups/count-shorter-popup';\nimport Button from '@mui/material/Button';\nimport React, { useState } from 'react';\n\nexport const CountShorterButton: React.FC = () => {\n  const [isOpen, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        fullWidth\n        onClick={() => setOpen(true)}\n      >\n        Count Routes shorter than ...\n      </Button>\n      {isOpen && (\n        <CountShorterPopup isOpen={isOpen} onClose={() => setOpen(false)} />\n      )}\n    </>\n  );\n};\n","import { Route } from '../../store/routes.store';\nimport React from 'react';\n\nexport const PrettyRoute: React.FC<{ route: Route }> = ({ route }) => {\n  return (\n    <div>\n      <div>ID: {route.id}</div>\n      <div>Name: {route.name}</div>\n      <div>\n        Coordinates: {`(${route.coordinates.x};${route.coordinates.y})`}\n      </div>\n      <div>\n        From:{' '}\n        {route.from\n          ? `${route.from?.name}(${route.from?.x};${route.from?.y})`\n          : 'Empty'}\n      </div>\n      <div>To: {`(${route.to.x};${route.to.y};${route.to.z})`}</div>\n      <div>Distance: {route.distance}</div>\n      <div>\n        Creation Date: {new Date(route.creationDate).toLocaleDateString('ru')}\n      </div>\n    </div>\n  );\n};\n","import { Alert, Dialog, DialogContent, Stack } from '@mui/material';\nimport { PrettyRoute } from './pretty-route';\nimport { Route } from '../../store/routes.store';\nimport { RoutesApi } from '../../api/routes.api';\nimport Button from '@mui/material/Button';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\ntype DeleteWithDistancePopupProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const DeleteWithDistancePopup: React.FC<DeleteWithDistancePopupProps> =\n  ({ isOpen, onClose }) => {\n    const [distance, setDistance] = useState<number>();\n    const [route, setRoute] = useState<Route>();\n    const [error, setError] = useState();\n\n    const onSubmit = (distance: number) => {\n      RoutesApi.deleteWithDistance(distance)\n        .then(res => {\n          setRoute(res);\n          setError(undefined);\n        })\n        .catch(error => setError(error));\n    };\n\n    return (\n      <Dialog open={isOpen} onClose={onClose}>\n        <DialogTitle>Delete Route with Distance = ...</DialogTitle>\n        <DialogContent>\n          <Stack spacing={1}>\n            <TextField\n              value={distance || ''}\n              onChange={e => setDistance(+e.target.value)}\n              fullWidth\n              type=\"number\"\n              size=\"small\"\n              label=\"Distance\"\n              required\n            />\n            {route && (\n              <Alert severity=\"success\">\n                <div>Deleted route:</div>\n                <PrettyRoute route={route} />\n              </Alert>\n            )}\n            {error && <Alert severity=\"error\">{error}</Alert>}\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button\n            onClick={() => distance != undefined && onSubmit(distance)}\n            disabled={distance == undefined}\n          >\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  };\n","import { DeleteWithDistancePopup } from '../popups/delete-with-distance-popup';\nimport Button from '@mui/material/Button';\nimport React, { useState } from 'react';\n\nexport const DeleteWithDistanceButton: React.FC = () => {\n  const [isOpen, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        fullWidth\n        onClick={() => setOpen(true)}\n      >\n        Delete Route with Distance = ...\n      </Button>\n      {isOpen && (\n        <DeleteWithDistancePopup\n          isOpen={isOpen}\n          onClose={() => setOpen(false)}\n        />\n      )}\n    </>\n  );\n};\n","import { Alert, Dialog, DialogContent, Stack } from '@mui/material';\nimport { PrettyRoute } from './pretty-route';\nimport { Route } from '../../store/routes.store';\nimport { RoutesApi } from '../../api/routes.api';\nimport Button from '@mui/material/Button';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\ntype GetByIdPopupProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const GetByIdPopup: React.FC<GetByIdPopupProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const [id, setId] = useState<number>();\n  const [route, setRoute] = useState<Route>();\n  const [error, setError] = useState();\n\n  const onSubmit = (id: number) => {\n    RoutesApi.getRouteById(id)\n      .then(res => {\n        setRoute(res);\n        setError(undefined);\n      })\n      .catch(error => setError(error));\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>Get Route by Id</DialogTitle>\n      <DialogContent>\n        <Stack spacing={1}>\n          <TextField\n            value={id || ''}\n            onChange={e => setId(parseInt(e.target.value, 10))}\n            fullWidth\n            type=\"number\"\n            size=\"small\"\n            label=\"Id\"\n            required\n          />\n          {route && (\n            <Alert severity=\"info\">\n              <PrettyRoute route={route} />\n            </Alert>\n          )}\n          {error && <Alert severity=\"error\">{error}</Alert>}\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          onClick={() => id != undefined && onSubmit(id)}\n          disabled={id == undefined}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { GetByIdPopup } from '../popups/get-by-id-popup';\nimport Button from '@mui/material/Button';\nimport React, { useState } from 'react';\n\nexport const GetByIdButton: React.FC = () => {\n  const [isOpen, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        fullWidth\n        onClick={() => setOpen(true)}\n      >\n        Get Route by ID\n      </Button>\n      {isOpen && (\n        <GetByIdPopup isOpen={isOpen} onClose={() => setOpen(false)} />\n      )}\n    </>\n  );\n};\n","import { Alert, Dialog, DialogContent } from '@mui/material';\nimport { PrettyRoute } from './pretty-route';\nimport { Route } from '../../store/routes.store';\nimport Button from '@mui/material/Button';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport React from 'react';\n\ntype GetMinPopupProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  route?: Route;\n  error?: any;\n};\n\nexport const GetMinPopup: React.FC<GetMinPopupProps> = ({\n  isOpen,\n  onClose,\n  route,\n  error,\n}) => {\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>Route with Min Distance</DialogTitle>\n      <DialogContent>\n        {route && (\n          <Alert severity=\"success\">\n            <PrettyRoute route={route} />\n          </Alert>\n        )}\n        {error && <Alert severity=\"error\">{error}</Alert>}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { GetMinPopup } from '../popups/get-min-popup';\nimport { Route } from '../../store/routes.store';\nimport { RoutesApi } from '../../api/routes.api';\nimport Button from '@mui/material/Button';\nimport React, { useState } from 'react';\n\nexport const GetMinButton: React.FC = () => {\n  const [isOpen, setOpen] = useState(false);\n  const [route, setRoute] = useState<Route>();\n  const [error, setError] = useState();\n\n  const onSubmit = () => {\n    RoutesApi.getWithMinDistance()\n      .then(res => {\n        setRoute(res);\n      })\n      .catch(error => setError(error))\n      .finally(() => setOpen(true));\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        fullWidth\n        onClick={onSubmit}\n      >\n        Get Route with Min Distance\n      </Button>\n      {isOpen && (\n        <GetMinPopup\n          isOpen={isOpen}\n          onClose={() => {\n            setOpen(false);\n            setError(undefined);\n            setRoute(undefined);\n          }}\n          route={route}\n          error={error}\n        />\n      )}\n    </>\n  );\n};\n","import { CountShorterButton } from './count-shorter-button';\nimport { DeleteWithDistanceButton } from './delete-with-distance-button';\nimport { GetByIdButton } from './get-by-id-button';\nimport { GetMinButton } from './get-min-button';\nimport { Stack } from '@mui/material';\nimport React from 'react';\n\nexport const AdditionalActions: React.FC = () => {\n  return (\n    <>\n      <Stack spacing={1} direction=\"row\">\n        <GetByIdButton />\n        <DeleteWithDistanceButton />\n        <CountShorterButton />\n        <GetMinButton />\n      </Stack>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { RoutePartial } from '../../store/routes.store';\nimport { Stack } from '@mui/material';\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport TextField from '@mui/material/TextField';\n\ntype EditRoutePopupProps = {\n  route: RoutePartial;\n  isOpen: boolean;\n  onSubmit: (route: RoutePartial) => void;\n  onClose: () => void;\n};\n\nexport const EditRoutePopup: React.FC<EditRoutePopupProps> = ({\n  route,\n  isOpen,\n  onSubmit,\n  onClose,\n}) => {\n  const [routeEdit, setRouteEdit] = useState(route);\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>{routeEdit.id ? 'Edit' : 'Add'} Route</DialogTitle>\n      <DialogContent>\n        <Stack spacing={1}>\n          {routeEdit.id && <div>ID: {routeEdit.id}</div>}\n          <div>Name</div>\n          <TextField\n            value={routeEdit.name || ''}\n            onChange={e =>\n              setRouteEdit(route => ({ ...route, name: e.target.value }))\n            }\n            fullWidth\n            size=\"small\"\n            label=\"Name\"\n            required\n          />\n          <div>Coordinates</div>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n            {'('}\n            <TextField\n              value={routeEdit.coordinates?.x || ''}\n              onChange={e =>\n                setRouteEdit(route => ({\n                  ...route,\n                  coordinates: { ...route.coordinates, x: +e.target.value },\n                }))\n              }\n              size=\"small\"\n              type=\"number\"\n              label=\"X\"\n              required\n            />\n            {';'}\n            <TextField\n              value={routeEdit.coordinates?.y || ''}\n              onChange={e =>\n                setRouteEdit(route => ({\n                  ...route,\n                  coordinates: { ...route.coordinates, y: +e.target.value },\n                }))\n              }\n              size=\"small\"\n              type=\"number\"\n              label=\"Y\"\n              required\n            />\n            {')'}\n          </Stack>\n          <div>From</div>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n            <TextField\n              value={routeEdit.from?.name || ''}\n              onChange={e =>\n                setRouteEdit(route => ({\n                  ...route,\n                  from: {\n                    ...route.from,\n                    name: e.target.value,\n                  },\n                }))\n              }\n              size=\"small\"\n              label=\"Name\"\n            />\n            {'('}\n            <TextField\n              value={routeEdit.from?.x || ''}\n              onChange={e =>\n                setRouteEdit(route => ({\n                  ...route,\n                  from: {\n                    ...route.from,\n                    x: +e.target.value,\n                  },\n                }))\n              }\n              size=\"small\"\n              type=\"number\"\n              label=\"X\"\n            />\n            {';'}\n            <TextField\n              value={routeEdit.from?.y || ''}\n              onChange={e =>\n                setRouteEdit(route => ({\n                  ...route,\n                  from: {\n                    ...route.from,\n                    y: +e.target.value,\n                  },\n                }))\n              }\n              size=\"small\"\n              type=\"number\"\n              label=\"Y\"\n            />\n            {')'}\n          </Stack>\n          <div>To</div>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n            {'('}\n            <TextField\n              value={routeEdit.to?.x || ''}\n              onChange={e =>\n                setRouteEdit(route => ({\n                  ...route,\n                  to: { ...route.to, x: +e.target.value },\n                }))\n              }\n              size=\"small\"\n              type=\"number\"\n              label=\"X\"\n              required\n            />\n            {';'}\n            <TextField\n              value={routeEdit.to?.y || ''}\n              onChange={e =>\n                setRouteEdit(route => ({\n                  ...route,\n                  to: { ...route.to, y: +e.target.value },\n                }))\n              }\n              size=\"small\"\n              type=\"number\"\n              label=\"Y\"\n              required\n            />\n            {';'}\n            <TextField\n              value={routeEdit.to?.z || ''}\n              onChange={e =>\n                setRouteEdit(route => ({\n                  ...route,\n                  to: { ...route.to, z: +e.target.value },\n                }))\n              }\n              size=\"small\"\n              type=\"number\"\n              label=\"Z\"\n              required\n            />\n            {')'}\n          </Stack>\n          <div>Distance</div>\n          <TextField\n            value={routeEdit.distance || ''}\n            onChange={e =>\n              setRouteEdit(route => ({ ...route, distance: +e.target.value }))\n            }\n            fullWidth\n            size=\"small\"\n            type=\"number\"\n            label=\"Distance\"\n            required\n          />\n          <div>Creation Date</div>\n          <div>\n            {routeEdit.creationDate\n              ? new Date(routeEdit.creationDate).toLocaleDateString('ru')\n              : new Date().toLocaleDateString('ru')}\n          </div>\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button onClick={() => onSubmit(routeEdit)}>Submit</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { TableCell, TableRow } from '@mui/material';\nimport React from 'react';\n\ntype EmptyRowProps = {\n  rowSpan: number;\n  colSpan: number;\n  text?: string;\n};\n\nexport const EmptyRow: React.FC<EmptyRowProps> = ({\n  rowSpan,\n  colSpan,\n  text,\n}) => {\n  return (\n    <TableRow\n      style={{\n        height: 43 * rowSpan,\n      }}\n    >\n      <TableCell colSpan={colSpan} align=\"center\">\n        {text}\n      </TableCell>\n    </TableRow>\n  );\n};\n","export type Coordinates = {\n  id?: number;\n  x: number;\n  y: number;\n};\n\nexport type LocationFrom = {\n  id?: number;\n  x: number;\n  y: number;\n  name?: string;\n};\n\nexport type LocationTo = {\n  id?: number;\n  x: number;\n  y: number;\n  z: number;\n};\n\nexport type Route = {\n  id?: number;\n  name: string;\n  coordinates: Coordinates;\n  creationDate: number;\n  from?: LocationFrom;\n  to: LocationTo;\n  distance: number;\n};\n\nexport type RoutePartial = {\n  id?: number;\n  name?: string;\n  coordinates?: Partial<Coordinates>;\n  from?: Partial<LocationFrom>;\n  to?: Partial<LocationTo>;\n  creationDate?: number | null;\n  distance?: number;\n};\n\nexport type SearchResponse = {\n  total: number;\n  entities: Route[];\n};\n\nexport const emptyRoute: RoutePartial = {\n  name: undefined,\n  coordinates: undefined,\n  to: undefined,\n  creationDate: null,\n  distance: undefined,\n};\n\nexport const defaultSearchState: SearchResponse = {\n  total: 0,\n  entities: [],\n};\n","import * as React from 'react';\nimport { Button, TableCell } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport TableFooter from '@mui/material/TableFooter';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\n\ntype RoutesTableFooterProps = {\n  page: number;\n  rowsPerPage: number;\n  count: number;\n  hasMore: boolean;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => void;\n  onRowsPerPageChange: (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => void;\n  onAdd: () => void;\n};\n\nexport const RoutesTableFooter: React.FC<RoutesTableFooterProps> = ({\n  page,\n  rowsPerPage,\n  count,\n  hasMore,\n  onPageChange,\n  onRowsPerPageChange,\n  onAdd,\n}) => {\n  return (\n    <TableFooter>\n      <TableRow>\n        <TableCell colSpan={2}>\n          <Button onClick={onAdd} startIcon={<AddIcon />}>\n            Add Route\n          </Button>\n        </TableCell>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          colSpan={6}\n          count={hasMore ? -1 : count}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={onPageChange}\n          onRowsPerPageChange={onRowsPerPageChange}\n          nextIconButtonProps={{ disabled: !hasMore }}\n        />\n      </TableRow>\n    </TableFooter>\n  );\n};\n","import {\n  TableCell,\n  TableHead,\n  TableRow,\n  tableCellClasses,\n} from '@mui/material';\nimport { styled } from '@mui/styles';\nimport React from 'react';\n\nconst HeaderTableCell = styled(TableCell)(() => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: '#42a5f5',\n    color: 'white',\n    fontWeight: 'bold',\n  },\n}));\n\nexport const RoutesTableHeader: React.FC = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        <HeaderTableCell size=\"small\" width={10}>\n          Id\n        </HeaderTableCell>\n        <HeaderTableCell align=\"right\">Name</HeaderTableCell>\n        <HeaderTableCell align=\"right\">Coordinates (X;Y)</HeaderTableCell>\n        <HeaderTableCell align=\"right\">From Name(X;Y)</HeaderTableCell>\n        <HeaderTableCell align=\"right\">To (X;Y;Z)</HeaderTableCell>\n        <HeaderTableCell align=\"right\">Distance</HeaderTableCell>\n        <HeaderTableCell align=\"right\">Creation Date</HeaderTableCell>\n        <HeaderTableCell align=\"right\" />\n      </TableRow>\n    </TableHead>\n  );\n};\n","import { RoutesApi } from '../api/routes.api';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\nconst ROUTES_THUNKS_BASE = 'routes/';\n\nconst getRoutes = createAsyncThunk(\n  ROUTES_THUNKS_BASE + 'get',\n  RoutesApi.getRoutes,\n);\n\nconst updateRoute = createAsyncThunk(\n  ROUTES_THUNKS_BASE + 'update',\n  RoutesApi.updateRoute,\n);\n\nconst deleteRoute = createAsyncThunk(\n  ROUTES_THUNKS_BASE + 'delete',\n  RoutesApi.deleteRouteById,\n);\n\nexport const RoutesThunks = {\n  getRoutes,\n  updateRoute,\n  deleteRoute,\n};\n","import {\n  TypedUseSelectorHook,\n  useDispatch as useBaseDispatch,\n  useSelector as useBaseSelector,\n} from 'react-redux';\nimport type { AppDispatch, RootState } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useDispatch = () => useBaseDispatch<AppDispatch>();\nexport const useSelector: TypedUseSelectorHook<RootState> = useBaseSelector;\n","import { IconButton } from '@mui/material';\nimport { Route } from '../../store/routes.store';\nimport { RoutesThunks } from '../../thunks/routes.thunks';\nimport { useDispatch } from '../../store/hooks';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport React from 'react';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\n\ntype RoutesTableRowProps = {\n  route: Route;\n  index: number;\n  onEdit: (index: number) => void;\n};\n\nexport const RoutesTableRow: React.FC<RoutesTableRowProps> = ({\n  route,\n  index,\n  onEdit,\n}) => {\n  const dispatch = useDispatch();\n\n  const deleteRow = () => {\n    if (route.id) dispatch(RoutesThunks.deleteRoute(route.id));\n  };\n\n  return (\n    <TableRow hover>\n      <TableCell size=\"small\">{route.id}</TableCell>\n      <TableCell align=\"right\">{route.name}</TableCell>\n      <TableCell align=\"right\">{`(${route.coordinates.x};${route.coordinates.y})`}</TableCell>\n      <TableCell align=\"right\">\n        {route.from\n          ? `${route.from?.name}(${route.from?.x};${route.from?.y})`\n          : 'Empty'}\n      </TableCell>\n      <TableCell align=\"right\">{`(${route.to.x};${route.to.y};${route.to.z})`}</TableCell>\n      <TableCell align=\"right\">{route.distance}</TableCell>\n      <TableCell align=\"right\">\n        {new Date(route.creationDate).toLocaleDateString('ru')}\n      </TableCell>\n      <TableCell align=\"right\">\n        <IconButton onClick={() => onEdit(index)} size=\"small\">\n          <EditIcon fontSize=\"small\" />\n        </IconButton>\n        <IconButton onClick={deleteRow} size=\"small\">\n          <DeleteIcon fontSize=\"small\" />\n        </IconButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n","import * as React from 'react';\nimport { EditRoutePopup } from '../popups/edit-route-popup';\nimport { EmptyRow } from './empty-row';\nimport { RoutePartial, emptyRoute } from '../../store/routes.store';\nimport { RoutesApi } from '../../api/routes.api';\nimport { RoutesTableFooter } from './table.footer';\nimport { RoutesTableHeader } from './table.header';\nimport { RoutesTableRow } from './table.row';\nimport { RoutesThunks } from '../../thunks/routes.thunks';\nimport { Status } from '../../store/routes.slice';\nimport { TableCell, TableRow } from '@mui/material';\nimport { partialToRoute } from '../../util/util';\nimport { useDispatch, useSelector } from '../../store/hooks';\nimport { useSnackbar } from 'notistack';\nimport { useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\n\ntype RoutesTableProps = {\n  page: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => void;\n  rowsPerPage: number;\n  onRowsPerPageChange: (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => void;\n};\n\nexport const RoutesTable: React.FC<RoutesTableProps> = ({\n  page,\n  onPageChange,\n  rowsPerPage,\n  onRowsPerPageChange,\n}) => {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const {\n    status,\n    entities: routes,\n    hasMore,\n  } = useSelector(state => state.routes);\n\n  const [editIndex, setEditIndex] = useState<number | null>();\n  const [isPopupOpen, setPopupOpen] = useState(false);\n  const rowToEdit = editIndex != null ? routes[editIndex] : emptyRoute;\n\n  const onEditClick = (index: number) => {\n    setEditIndex(index);\n    setPopupOpen(true);\n  };\n\n  const onSubmit = (route: RoutePartial) => {\n    if (editIndex != null) {\n      dispatch(RoutesThunks.updateRoute(partialToRoute(route)));\n    } else {\n      RoutesApi.addRoute(route)\n        .then(route => {\n          enqueueSnackbar(`Route was added with id = ${route.id}`, {\n            variant: 'success',\n          });\n          setPopupOpen(false);\n        })\n        .catch(err => enqueueSnackbar(String(err), { variant: 'error' }));\n    }\n  };\n\n  const shownRows = routes.slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage,\n  );\n\n  const nextPageAvailable =\n    page * rowsPerPage + rowsPerPage < routes.length || hasMore;\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 500 }} aria-label=\"routes table\" size=\"small\">\n          <RoutesTableHeader />\n          <TableBody>\n            {shownRows.map((route, index) => (\n              <RoutesTableRow\n                route={route}\n                key={route.id}\n                index={page + index}\n                onEdit={onEditClick}\n              />\n            ))}\n            {status == Status.LOADED && !routes.length && (\n              <TableRow>\n                <TableCell colSpan={8} align=\"center\">\n                  No Routes found\n                </TableCell>\n              </TableRow>\n            )}\n            {shownRows.length < rowsPerPage && (\n              <EmptyRow\n                rowSpan={rowsPerPage - shownRows.length}\n                colSpan={8}\n                text={status == Status.FETCHING ? 'Loading...' : ''}\n              />\n            )}\n          </TableBody>\n          <RoutesTableFooter\n            page={page}\n            rowsPerPage={rowsPerPage}\n            onPageChange={onPageChange}\n            onRowsPerPageChange={onRowsPerPageChange}\n            onAdd={() => setPopupOpen(true)}\n            hasMore={nextPageAvailable}\n            count={routes.length}\n          />\n        </Table>\n      </TableContainer>\n      {isPopupOpen && (\n        <EditRoutePopup\n          route={rowToEdit}\n          isOpen={isPopupOpen}\n          onSubmit={onSubmit}\n          onClose={() => {\n            setEditIndex(null);\n            setPopupOpen(false);\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { RouteFields, SortType } from './config';\nimport React from 'react';\n\ntype SortingInputProps = {\n  field: RouteFields;\n  sorting: SortType;\n  onChange: (field: RouteFields, sorting: SortType) => void;\n};\n\nexport const SortingInput: React.FC<SortingInputProps> = ({\n  field,\n  onChange,\n  sorting,\n}) => {\n  return (\n    <FormControl fullWidth size=\"small\">\n      <InputLabel id={`${field}-select-label`}>Sorting</InputLabel>\n      <Select\n        id={`${field}-select`}\n        value={sorting}\n        onChange={e => onChange(field, e.target.value as SortType)}\n        labelId={`${field}-select-label`}\n        label=\"Sorting\"\n      >\n        <MenuItem value=\"asc\">Asc</MenuItem>\n        <MenuItem value=\"desc\">Desc</MenuItem>\n        <MenuItem value={''}>No</MenuItem>\n      </Select>\n    </FormControl>\n  );\n};\n","import { Box, Stack, TextField } from '@mui/material';\nimport { DatePicker } from '@mui/lab';\nimport { FilterSorterField, RouteFields, SortType } from './config';\nimport { SortingInput } from './sorting-input';\nimport React from 'react';\n\ntype DateFieldProps = {\n  value: string;\n  fieldName: RouteFields;\n  setFieldValue: (field: RouteFields, value: string) => void;\n  label: string;\n};\n\nconst DateField: React.FC<DateFieldProps> = ({\n  value,\n  setFieldValue,\n  fieldName,\n  label,\n}) => (\n  <DatePicker\n    value={value ? new Date(value) : null}\n    onChange={value => setFieldValue(fieldName, value?.toISOString() || '')}\n    renderInput={params => <TextField fullWidth size=\"small\" {...params} />}\n    label={label}\n  />\n);\n\ntype FilterFieldProps = {\n  filterSorterField: FilterSorterField;\n  fieldName: RouteFields;\n  setFieldValue: (field: RouteFields, value: string) => void;\n  setFieldSorting: (field: RouteFields, sorting: SortType) => void;\n  type: 'text' | 'number' | 'date';\n  title?: string;\n  label: string;\n};\n\nexport const FilterField: React.FC<FilterFieldProps> = ({\n  filterSorterField,\n  fieldName,\n  setFieldValue,\n  setFieldSorting,\n  type,\n  title,\n  label,\n}) => {\n  return (\n    <Box>\n      {title && <div className=\"section-label\">{title}</div>}\n      <Stack spacing={1} alignItems=\"center\">\n        {type == 'date' ? (\n          <DateField\n            fieldName={fieldName}\n            setFieldValue={setFieldValue}\n            value={filterSorterField.value}\n            label={label}\n          />\n        ) : (\n          <TextField\n            label={label}\n            value={filterSorterField.value}\n            onChange={e => setFieldValue(fieldName, e.target.value)}\n            fullWidth\n            type={type}\n            size=\"small\"\n          />\n        )}\n        <SortingInput\n          sorting={filterSorterField.sorting}\n          field={fieldName}\n          onChange={setFieldSorting}\n        />\n      </Stack>\n    </Box>\n  );\n};\n","import './sorter.css';\nimport { Button, Paper, Stack } from '@mui/material';\nimport { FilterField } from './filter-field';\nimport {\n  FilterSorter,\n  RouteFields,\n  SortType,\n  getFieldEndLabel,\n  getFieldLabel,\n} from './config';\nimport React from 'react';\n\ntype SorterProps = {\n  filterSorter: FilterSorter;\n  setFieldSorting: (field: RouteFields, sorting: SortType) => void;\n  setFieldValue: (field: RouteFields, value: string) => void;\n  getFilteredRoutes: () => void;\n  clearFilter: () => void;\n};\n\nexport const Sorter: React.FC<SorterProps> = ({\n  filterSorter,\n  setFieldSorting,\n  setFieldValue,\n  getFilteredRoutes,\n  clearFilter,\n}) => {\n  return (\n    <Paper variant=\"outlined\" className=\"sorter\">\n      <Stack spacing={1}>\n        <Stack spacing={1} direction=\"row\" alignItems=\"flex-end\">\n          <FilterField\n            fieldName={RouteFields.ID}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.ID]}\n            label={getFieldLabel(RouteFields.ID)}\n            setFieldSorting={setFieldSorting}\n            type=\"number\"\n            title={getFieldLabel(RouteFields.ID)}\n          />\n          <FilterField\n            fieldName={RouteFields.NAME}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.NAME]}\n            label={getFieldLabel(RouteFields.NAME)}\n            setFieldSorting={setFieldSorting}\n            type=\"text\"\n            title={getFieldLabel(RouteFields.NAME)}\n          />\n          <FilterField\n            fieldName={RouteFields.COORDINATES_X}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.COORDINATES_X]}\n            label={getFieldEndLabel(RouteFields.COORDINATES_X)}\n            setFieldSorting={setFieldSorting}\n            type=\"number\"\n            title={getFieldLabel(RouteFields.COORDINATES_X)}\n          />\n          <FilterField\n            fieldName={RouteFields.COORDINATES_Y}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.COORDINATES_Y]}\n            label={getFieldEndLabel(RouteFields.COORDINATES_Y)}\n            setFieldSorting={setFieldSorting}\n            type=\"number\"\n          />\n          <FilterField\n            fieldName={RouteFields.FROM_X}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.FROM_X]}\n            label={getFieldEndLabel(RouteFields.FROM_X)}\n            setFieldSorting={setFieldSorting}\n            type=\"number\"\n            title={getFieldLabel(RouteFields.FROM_X)}\n          />\n          <FilterField\n            fieldName={RouteFields.FROM_Y}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.FROM_Y]}\n            label={getFieldEndLabel(RouteFields.FROM_Y)}\n            setFieldSorting={setFieldSorting}\n            type=\"number\"\n          />\n          <FilterField\n            fieldName={RouteFields.FROM_NAME}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.FROM_NAME]}\n            label={getFieldEndLabel(RouteFields.FROM_NAME)}\n            setFieldSorting={setFieldSorting}\n            type=\"text\"\n          />\n          <FilterField\n            fieldName={RouteFields.TO_X}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.TO_X]}\n            label={getFieldEndLabel(RouteFields.TO_X)}\n            setFieldSorting={setFieldSorting}\n            type=\"number\"\n            title={getFieldLabel(RouteFields.TO_X)}\n          />\n          <FilterField\n            fieldName={RouteFields.TO_Y}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.TO_Y]}\n            label={getFieldEndLabel(RouteFields.TO_Y)}\n            setFieldSorting={setFieldSorting}\n            type=\"number\"\n          />\n          <FilterField\n            fieldName={RouteFields.TO_Z}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.TO_Z]}\n            label={getFieldEndLabel(RouteFields.TO_Z)}\n            setFieldSorting={setFieldSorting}\n            type=\"number\"\n          />\n          <FilterField\n            fieldName={RouteFields.DISTANCE}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.DISTANCE]}\n            label={getFieldLabel(RouteFields.DISTANCE)}\n            setFieldSorting={setFieldSorting}\n            type=\"number\"\n            title={getFieldLabel(RouteFields.DISTANCE)}\n          />\n          <FilterField\n            fieldName={RouteFields.CREATION_DATE}\n            setFieldValue={setFieldValue}\n            filterSorterField={filterSorter[RouteFields.CREATION_DATE]}\n            label={RouteFields.CREATION_DATE}\n            setFieldSorting={setFieldSorting}\n            type=\"date\"\n            title={RouteFields.CREATION_DATE}\n          />\n        </Stack>\n        <Button variant=\"contained\" fullWidth onClick={getFilteredRoutes}>\n          Apply\n        </Button>\n        <Button variant=\"outlined\" fullWidth onClick={clearFilter}>\n          Clear Filter\n        </Button>\n      </Stack>\n    </Paper>\n  );\n};\n","import { RouteFields, SortType, initialFilterSorter } from './config';\nimport { RoutesTable } from '../table/table';\nimport { RoutesThunks } from '../../thunks/routes.thunks';\nimport { Sorter } from './sorter';\nimport { separateFilterSorter } from '../../util/util';\nimport { useDispatch, useSelector } from '../../store/hooks';\nimport React, { useEffect, useState } from 'react';\n\nexport const FilterSorterContext: React.FC = () => {\n  const [filterSorter, setFilterSorter] = useState(initialFilterSorter);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const dispatch = useDispatch();\n  const { entities: routes, hasMore } = useSelector(state => state.routes);\n\n  const setFieldSorting = (field: RouteFields, sorting: SortType) => {\n    setFilterSorter({\n      ...filterSorter,\n      [field]: { ...filterSorter[field], sorting },\n    });\n  };\n\n  const setFieldValue = (field: RouteFields, value: string) => {\n    setFilterSorter({\n      ...filterSorter,\n      [field]: { ...filterSorter[field], value },\n    });\n  };\n\n  const fetchRoutesWithFilter = (offset: number, limit: number) => {\n    const { sort, filter } = separateFilterSorter(filterSorter);\n    dispatch(\n      RoutesThunks.getRoutes({\n        sort,\n        filter,\n        offset,\n        limit,\n      }),\n    );\n  };\n\n  const getFilteredRoutes = () => {\n    setPage(0);\n    fetchRoutesWithFilter(0, rowsPerPage);\n  };\n\n  useEffect(() => {\n    if (routes.length) return;\n    dispatch(RoutesThunks.getRoutes({ offset: 0, limit: rowsPerPage }));\n  }, []);\n\n  const onPageChange = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => {\n    setPage(newPage);\n    const pageStart = newPage * rowsPerPage;\n    const pageEnd = pageStart + rowsPerPage;\n    if (routes.length < pageEnd && hasMore) {\n      const offset = Math.max(routes.length, pageStart);\n      const limit = Math.min(rowsPerPage, pageEnd - routes.length);\n      fetchRoutesWithFilter(offset, limit);\n    }\n  };\n\n  const onRowsPerPageChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const newRowsPerPage = parseInt(event.target.value, 10);\n    setRowsPerPage(newRowsPerPage);\n    setPage(0);\n    if (routes.length < newRowsPerPage && hasMore) {\n      const offset = routes.length;\n      const limit = newRowsPerPage - routes.length;\n      fetchRoutesWithFilter(offset, limit);\n    }\n  };\n\n  const clearFilter = () => {\n    setFilterSorter(initialFilterSorter);\n  };\n\n  return (\n    <>\n      <Sorter\n        filterSorter={filterSorter}\n        setFieldSorting={setFieldSorting}\n        setFieldValue={setFieldValue}\n        getFilteredRoutes={getFilteredRoutes}\n        clearFilter={clearFilter}\n      />\n      <RoutesTable\n        page={page}\n        onPageChange={onPageChange}\n        rowsPerPage={rowsPerPage}\n        onRowsPerPageChange={onRowsPerPageChange}\n      />\n    </>\n  );\n};\n","import './layout.css';\nimport { AdditionalActions } from './additional-actions/additional-actions';\nimport { Container, Stack } from '@mui/material';\nimport { FilterSorterContext } from './filter-sorter/filter-sorter-context';\nimport { LocalizationProvider } from '@mui/lab';\nimport DateAdapter from '@mui/lab/AdapterDateFns';\nimport React from 'react';\n\nconst Header = () => (\n  <div>\n    <h1>Lab #1 (1009)</h1>\n  </div>\n);\n\nexport const Layout: React.FC = () => {\n  return (\n    <div className=\"layout\">\n      <Container maxWidth=\"xl\">\n        <LocalizationProvider dateAdapter={DateAdapter}>\n          <Stack spacing={1}>\n            <Header />\n            <AdditionalActions />\n            <FilterSorterContext />\n          </Stack>\n        </LocalizationProvider>\n      </Container>\n    </div>\n  );\n};\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>(resolve =>\n    setTimeout(() => resolve({ data: amount }), 500),\n  );\n}\n","import { AppThunk, RootState } from './store';\nimport { PayloadAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from '../api/counter.api';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  },\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder\n      .addCase(incrementAsync.pending, state => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount));\n    }\n  };\n\nexport default counterSlice.reducer;\n","import { Action, ThunkAction, configureStore } from '@reduxjs/toolkit';\nimport { routesReducer } from './routes.slice';\nimport counterReducer from './counter.slice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    routes: routesReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import './index.css';\nimport { Layout } from './components/layout';\nimport { Provider } from 'react-redux';\nimport { SnackbarProvider } from 'notistack';\nimport { store } from './store/store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <SnackbarProvider maxSnack={3}>\n        <Layout />\n      </SnackbarProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}